
(1).Write a program containing a possible exception. Use a try block to throw it and a catch block
	to handle it promptly.

class ExceptionThrown
{
    static int divideByZero(int a, int b){          
        int i = a/b;
          
        return i;
    }
    static int computeDivision(int a, int b) {    
        int res =0;
          
        try
        {
        res = divideByZero(a,b);
        }
        catch(NumberFormatException ex)
        {
        System.out.println("NumberFormatException is occured");
        }
        return res;
    }
    public static void main(String args[]){   
        int a = 1;
        int b = 0;
          
        try
        {
            int i = computeDivision(a,b); 
        }
        catch(ArithmeticException ex)
        }
            System.out.println(ex.getMessage());
        }
}
}	


(2). Write a program that illustrates the application of multiple catch statements.

public class MultipleCatchBlock {    
    public static void main(String[] args) {  
          
           try{    
                int a[]=new int[5];    
                a[5]=30/0;    
                System.out.println(a[10]);  
               }    
               catch(ArithmeticException e)  
                  {  
                   System.out.println("Arithmetic Exception occurs");  
                  }    
               catch(ArrayIndexOutOfBoundsException e)  
                  {  
                   System.out.println("ArrayIndexOutOfBounds Exception occurs");  
                  }    
               catch(Exception e)  
                  {  
                   System.out.println("Parent Exception occurs");  
                  }             
               System.out.println("rest of the code");    
	}
}

(3). Write a program that demonstrates how certain exception types are not allowed to be thrown.

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
class File_notFound_Demo {

public static void main(String args[]) {
	try {
		File file = new File("E://file.txt");

		FileReader fr = new FileReader(file);
	} catch (FileNotFoundException e) {
	System.out.println("File does not exist");
	}
}
}


(4). program to demonstrate the concept of re-throwing an exception.

public class RethrowException {
   public static void test1() throws Exception {
      System.out.println("The Exception in test1() method");
      throw new Exception("thrown from test1() method");
   }
   public static void test2() throws Throwable {
      try {
         test1();
      } catch(Exception e) {
         System.out.println("Inside test2() method");
         throw e;
      }}
   public static void main(String[] args) throws Throwable {
      try {
         test2();
      } catch(Exception e) {
         System.out.println("Caught in main");
      }
}
}

	
(5). You will be given two integers and as input, you have to compute x/y. If x and y are not 32 bit
signed integers or if y is zero, exception will occur and you have to report it. Read sample Input/Output
to know what to report in case of exceptions.

public class JavaExceptionHanldingTryCatch {
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try{
        try{
            int a = new Integer(sc.nextInt());
            int b = new Integer(sc.nextInt());
            System.out.println(""+(a/b));
        }
	catch (InputMismatchException e)
	{
            System.out.println("java.util.InputMismatchException");
        }}
	catch(Exception e){
            System.out.println(e);
        }
}
}

